name: Update Firmware Metadata

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name (for manual run, default is v1.0.0)'
        required: false
        default: 'v1.0.0'

jobs:
  update-metadata:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout firmware-repo
        uses: actions/checkout@v4

      - name: Set tag name
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> "$GITHUB_ENV"
          else
            # Use workflow input or default to v1.0.0
            echo "TAG_NAME=${{ github.event.inputs.tag_name || 'v1.0.0' }}" >> "$GITHUB_ENV"
          fi

      - name: Get release info
        id: release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const tag = process.env.TAG_NAME || '${{ env.TAG_NAME }}' || 'v1.0.0';
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            return JSON.stringify(release.data);

      - name: Generate firmware.json
        id: generate
        run: |
          echo '${{ steps.release.outputs.result }}' > release.json
          echo "{" > firmware.json
          echo "  \"version\": \"${{ env.TAG_NAME }}\"," >> firmware.json
          echo "  \"firmwares\": {" >> firmware.json
          ASSETS=$(jq -r '.assets[] | "\(.name)|\(.browser_download_url)"' release.json)
          COUNT=$(echo "$ASSETS" | wc -l)
          IDX=0
          echo "$ASSETS" | while IFS='|' read -r name url; do
            device=$(echo "$name" | cut -d'_' -f1)
            echo "    \"$device\": {" >> firmware.json
            echo "      \"filename\": \"$name\"," >> firmware.json
            echo "      \"url\": \"$url\"" >> firmware.json
            if [ "$IDX" -lt $((COUNT - 1)) ]; then
              echo "    }," >> firmware.json
            else
              echo "    }" >> firmware.json
            fi
            IDX=$((IDX + 1))
          done
          echo "  }" >> firmware.json
          echo "}" >> firmware.json

      - name: Clone firmware-meta repo
        uses: actions/checkout@v4
        with:
          repository: rajputapoorva94/firmware-meta
          token: ${{ secrets.PERSONAL_TOKEN }}
          path: meta

      - name: Copy and Commit firmware.json
        run: |
          cp firmware.json meta/
          cd meta
          git config user.name "GitHub Action"
          git config user.email "actions@github.com"
          git add firmware.json
          git commit -m "Update firmware metadata for ${{ env.TAG_NAME }}"
          git push